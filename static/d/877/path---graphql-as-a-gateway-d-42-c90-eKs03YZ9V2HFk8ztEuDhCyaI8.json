{"data":{"site":{"siteMetadata":{"title":"Bruno Luiz Blog","author":"Bruno Luiz Silva"}},"markdownRemark":{"id":"76a9ce47-f486-5ba3-9bb0-c87ce7caa6d6","excerpt":"GraphQL, REST, gRPC, Thrift… Have you ever imagined how to glue these together, in a micro-services architecture, and expose to the world? There are some common…","html":"<p>GraphQL, REST, gRPC, Thrift… Have you ever imagined how to glue these together, in a micro-services architecture, and expose to the world? There are some common ways to do it, such as using Nginx or Kong, but an alternative way to do this is by using GraphQL in front of all services.</p>\n<h2>API Gateway pattern — a quick introduction</h2>\n<p>Considering service A and B, how a client would be able to request it’s data? The easiest and straight forward way would be to do a request to service A and another to B, each request pointing to different hosts.</p>\n<p>The problem is, as the number of services grow, it is quite laborous to keep up with this strategy. To solve this, a proxy can be used, where the client will request to only one host instead of multiple, and this proxy service will orchestrate where this request should go.</p>","frontmatter":{"title":"GraphQL as a Gateway","date":"April 03, 2019","cover":null}}},"pageContext":{"slug":"/graphql-as-a-gateway/","previous":{"fields":{"slug":"/2019/mar/kubernetes-devops-productivity-hacks/"},"frontmatter":{"title":"Kubernetes devops productivity hacks"}},"next":null}}